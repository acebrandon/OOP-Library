class /OOP/CL_DISPATCHER definition
  public
  inheriting from /OOP/CL_OBJECT
  create public .

public section.
*"* public components of class /OOP/CL_DISPATCHER
*"* do not include other source files here!!!

  interfaces IF_HTTP_EXTENSION .

  methods SERVICE
    importing
      !REQUEST type ref to /OOP/IF_REQUEST
      !RESPONSE type ref to /OOP/IF_RESPONSE
    raising
      /OOP/CX_RESOURCE_EXCEPTION .
protected section.
*"* protected components of class /OOP/CL_DISPATCHER
*"* do not include other source files here!!!

  methods GET_MAPPED_RESOURCE
    importing
      !REQUEST type ref to /OOP/IF_REQUEST
    returning
      value(RETURNING) type ref to /OOP/IF_RESOURCE
    raising
      /OOP/CX_URI_TOO_LONG .
private section.
*"* private components of class /OOP/CL_DISPATCHER
*"* do not include other source files here!!!
ENDCLASS.



CLASS /OOP/CL_DISPATCHER IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method /OOP/CL_DISPATCHER->GET_MAPPED_RESOURCE
* +-------------------------------------------------------------------------------------------------+
* | [--->] REQUEST                        TYPE REF TO /OOP/IF_REQUEST
* | [<-()] RETURNING                      TYPE REF TO /OOP/IF_RESOURCE
* | [!CX!] /OOP/CX_URI_TOO_LONG
* +--------------------------------------------------------------------------------------</SIGNATURE>
method get_mapped_resource.
*/**
* Finds the resource mapped to the request URI.
* The resource is mapped using a URI pattern. When matching a request URI to a URI pattern, the following rules apply:
* 1. an exact path match is preferred over a wildcard path match
* 2. the longest pattern is preferred over shorter patterns
*
* Examples:
* - request URI: /partners/12/address
* - patterns:    /partners
*                /partners/*
*                /partners/*/address
* - result:      second and third match; the third pattern is chosen
*
* - request URI: /partners
* - patterns:    /partners
*                /partners/*
*                /partners/*/address
* - result:      all match; the first pattern is chosen
*/
  " - Get request URI
  data uri type string.
  uri = request->get_requesturi( ).
  if strlen( uri ) > 255. " Maximum supported URI length
    raise exception type /oop/cx_uri_too_long.
  endif.
  translate uri to upper case.
  " - Match URI to a URI pattern and its mapped resource
  data ta_resources type standard table of /oop/resources.
  data wa_resources type /oop/resources.
  data matching_patterns type standard table of string.
  " - Find matching patterns
  select * from /oop/resources into table ta_resources.
  if sy-subrc <> 0.
    return.
  endif.
  loop at ta_resources into wa_resources.
    if wa_resources-uripattern is not initial. " Ignore empty patterns
      if uri cp wa_resources-uripattern.
        append wa_resources-uripattern to matching_patterns.
      endif.
    endif.
  endloop.
  " - Choose the best pattern
  data final_matching_pattern type char255.
  data matching_pattern type string.
  " -- Look for an exact match first
  loop at matching_patterns into matching_pattern.
    if uri = matching_pattern.
      final_matching_pattern = matching_pattern.
      exit.
    endif.
  endloop.
  " -- If no exact match was found, choose the longest matching pattern
  data matching_pattern_length type i.
  loop at matching_patterns into matching_pattern.
    if strlen( matching_pattern ) > matching_pattern_length.
      final_matching_pattern = matching_pattern.
    endif.
    matching_pattern_length = strlen( matching_pattern ).
  endloop.
  " - Get the resource mapped to the chosen pattern and return it
  if final_matching_pattern is not initial.
    data resource type ref to /oop/if_resource.
    read table ta_resources into wa_resources with key uripattern = final_matching_pattern.
    if sy-subrc = 0.
      try.
          create object resource type (wa_resources-resourceclass).
        catch cx_sy_create_object_error.
          " Do nothing; this method returns null if no resource was found
          return.
      endtry.
    endif.
  endif.
  returning = resource.
endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method /OOP/CL_DISPATCHER->IF_HTTP_EXTENSION~HANDLE_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] SERVER                         TYPE REF TO IF_HTTP_SERVER
* +--------------------------------------------------------------------------------------</SIGNATURE>
method if_http_extension~handle_request.
*/**
* This method is called by the SAP ICF system on handler classes
* Wraps the SAP request and response objects and let's the SERVICE method handle them
*/
  " Wrap request and response
  data request type ref to /oop/if_request.
  data response type ref to /oop/if_response.
  create object request
    type
    /oop/cl_request
    exporting
      request = server->request.
  create object response
    type
    /oop/cl_response
    exporting
      response = server->response.
  " Handle request
  data e type ref to /oop/cx_resource_exception.
  try.
      me->service( request = request response = response ).
    catch /oop/cx_resource_exception into e.
      response->send_internal_server_error( message = e->message ).
  endtry.
endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method /OOP/CL_DISPATCHER->SERVICE
* +-------------------------------------------------------------------------------------------------+
* | [--->] REQUEST                        TYPE REF TO /OOP/IF_REQUEST
* | [--->] RESPONSE                       TYPE REF TO /OOP/IF_RESPONSE
* | [!CX!] /OOP/CX_RESOURCE_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
method service.
*/**
* Dispatches the HTTP request to the corresponding resource.
* Returns the NOT_FOUND status code for unknown resources.
* Returns the NOT_IMPLEMENTED status code for methods which are not supported.
* Supported methods:
* - DELETE
* - GET
* - POST
* - PUT
* - HEAD
*/
  data message type string. " Used for error messages
  " Find the resource mapped to the request URI
  data resource type ref to /oop/if_resource.
  try.
      resource = me->get_mapped_resource( request ).
    catch /oop/cx_uri_too_long.
      " Too long URI
      message e004(/oop/rest) into message.
      response->send_error( code = /oop/cl_http_status_codes=>requesturi_too_large message = message ).
      return.
  endtry.
  if resource is not bound.
    " Unknown resource
    message e003(/oop/rest) into message.
    response->send_not_found( message = message ).
    return.
  endif.
  " Dispatch request to the requested resource
  data method type string.
  method = request->get_method( ).
  case method.
    when /oop/cl_http_methods=>delete.
      resource->delete( request = request response = response ).
    when /oop/cl_http_methods=>get.
      resource->read( request = request response = response ).
    when /oop/cl_http_methods=>post.
      resource->create( request = request response = response ).
    when /oop/cl_http_methods=>put.
      resource->update( request = request response = response ).
    when /oop/cl_http_methods=>head.
      resource->head( request = request response = response ).
    when others.
      " Unsupported HTTP method
      message e002(/oop/rest) into message.
      response->send_error( code = /oop/cl_http_status_codes=>not_implemented message = message ).
      return.
  endcase.
endmethod.
ENDCLASS.
